pipeline {
    agent any

    environment {
        version = "v1.0.0"
        github_org = "ajith-continuum"
        repository = "hello-world"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'a6243903-beda-4824-904e-39250299a16a', url: 'https://github.com/ajith-continuum/hello-world.git']]])
            }
        }
        stage('Create Git Tag') {
            steps {
                script {
                    def parts = version.tokenize(".")
                    def major = parts[0].substring(1).toInteger()
                    def minor = parts[1].toInteger()
                    def patch = parts[2].toInteger()
                    def newVersion = "v${major}.${minor}.${patch + BUILD_NUMBER}"
                    sh "git tag -a ${newVersion} -m 'Tag created by Jenkins build'"
                }
            }
        }
        stage('Push Git Tag') {
            steps {
                script {
                    def parts = version.tokenize(".")
                    def major = parts[0].substring(1).toInteger()
                    def minor = parts[1].toInteger()
                    def patch = parts[2].toInteger()
                    def newVersion = "v${major}.${minor}.${patch + BUILD_NUMBER}"
                    withCredentials([string(credentialsId: 'github-pat', variable: 'PAT')]) {
  			sh "git push https://${PAT}@github.com/ajith-continuum/hello-world.git ${newVersion}"
		    }
                }
            }
        }
	stage("Create GitHub Release") {
            steps {
                script {
                    // Retrieve the latest tag from the GitHub repository
                    def latestTag = sh(returnStdout: true, script: 'git describe --abbrev=0 --tags').trim()
                    echo "Latest tag: ${latestTag}"
                    withCredentials([string(credentialsId: 'github-pat', variable: 'PAT')]) {
                    sh "curl -X POST -H 'Authorization: token ${PAT}' -H 'Content-Type: application/json' -d '{\"tag_name\":\"${latestTag}\",\"target_commitish\": \"master\",\"name\": \"${latestTag}\",\"body\": \"Release created by Jenkins\",\"draft\": false,\"prerelease\": false}' https://api.github.com/repos/${github_org}/${repository}/releases"
                    }
                }
            }
        }
        stage('Clone Latest Release') {
           steps {
                sh 'git config --global advice.detachedHead false'
                sh '''
                    # Get the latest release tag
                    release_tag=$(curl -s https://api.github.com/repos/${github_org}/${repository}/releases/latest | jq -r '.tag_name')
                    
                    # Check if the tag exists in the server
                     if [ -d "/path/to/repo/${release_tag}" ]; then
                        echo "Latest release & tag already exists"
                    else
                        # Remove the old directory if it exists
                        rm -rf "/path/to/repo"
                        git clone --branch ${release_tag} https://github.com/${github_org}/${repository}.git "/path/to/repo/${release_tag}"
                        git config --global advice.detachedHead false
                    fi
                '''
            
            }
        }
    }
}
